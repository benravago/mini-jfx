--- sdk/javafx.graphics/com/sun/javafx/iio/ImageStorage.java	2021-10-16 18:21:20.000000000 -0400
+++ src/javafx.graphics/com/sun/javafx/iio/ImageStorage.java	2021-12-27 18:54:45.583955474 -0500
@@ -30,7 +30,6 @@
 import com.sun.javafx.iio.bmp.BMPImageLoaderFactory;
 import com.sun.javafx.iio.common.ImageTools;
 import com.sun.javafx.iio.gif.GIFImageLoaderFactory;
-import com.sun.javafx.iio.ios.IosImageLoaderFactory;
 import com.sun.javafx.iio.jpeg.JPEGImageLoaderFactory;
 import com.sun.javafx.iio.png.PNGImageLoaderFactory;
 import com.sun.javafx.util.DataURI;
@@ -119,18 +118,10 @@
      */
     private static final HashMap<Signature, ImageLoaderFactory> loaderFactoriesBySignature;
     private static final ImageLoaderFactory[] loaderFactories;
-    private static final boolean isIOS = PlatformUtil.isIOS();
 
     private static int maxSignatureLength;
 
     static {
-        if (isIOS) {
-            //On iOS we have single factory/ native loader
-            //for all image formats
-            loaderFactories = new ImageLoaderFactory[]{
-                IosImageLoaderFactory.getInstance()
-            };
-        } else {
             loaderFactories = new ImageLoaderFactory[]{
                 GIFImageLoaderFactory.getInstance(),
                 JPEGImageLoaderFactory.getInstance(),
@@ -138,7 +129,6 @@
                 BMPImageLoaderFactory.getInstance()
                 // Note: append ImageLoadFactory for any new format here.
             };
-        }
 
 //        loaderFactoriesByExtension = new HashMap(numExtensions);
         loaderFactoriesBySignature = new HashMap<Signature, ImageLoaderFactory>(loaderFactories.length);
@@ -261,13 +251,7 @@
         ImageFrame[] images = null;
 
         try {
-            if (isIOS) {
-                // no extension/signature recognition done here,
-                // we always want the iOS native loader
-                loader = IosImageLoaderFactory.getInstance().createImageLoader(input);
-            } else {
                 loader = getLoaderBySignature(input, listener);
-            }
             if (loader != null) {
                 images = loadAll(loader, width, height, preserveAspectRatio, pixelScale, smooth);
             } else {
@@ -332,11 +316,7 @@
                     }
                 }
 
-                if (isIOS) {
-                    loader = IosImageLoaderFactory.getInstance().createImageLoader(theStream);
-                } else {
                     loader = getLoaderBySignature(theStream, listener);
-                }
             } catch (Exception e) {
                 throw new ImageStorageException(e.getMessage(), e);
             }
